var searchIndex = {};
searchIndex['toml'] = {"items":[[0,"","toml","A TOML-parsing library"],[3,"Parser","","Parser for converting a string to a TOML `Value` instance."],[12,"errors","","A list of all errors which have occurred during parsing.",0],[3,"ParserError","","A structure representing a parse error."],[12,"lo","","The low byte at which this error is pointing at.",1],[12,"hi","","One byte beyond the last character at which this error is pointing at.",1],[12,"desc","","A human-readable description explaining what the error is.",1],[3,"Encoder","","A structure to transform Rust values into TOML values."],[12,"toml","","Output TOML that is emitted. The current version of this encoder forces\nthe top-level representation of a structure to be a table.",2],[3,"Decoder","","A structure to transform TOML values into Rust values."],[12,"toml","","The TOML value left over after decoding. This can be used to inspect\nwhether fields were decoded or not.",3],[3,"DecodeError","","Description for errors which can occur while decoding a type."],[12,"field","","Field that this error applies to.",4],[12,"kind","","The type of error which occurred while decoding,",4],[4,"Error","","Enumeration of errors which can occur while encoding a rust value into a\nTOML value."],[13,"NeedsKey","","Indication that a key was needed when a value was emitted, but no key\nwas previously emitted.",5],[13,"NoValue","","Indication that a key was emitted, but not value was emitted.",5],[13,"InvalidMapKeyLocation","","Indicates that a map key was attempted to be emitted at an invalid\nlocation.",5],[13,"InvalidMapKeyType","","Indicates that a type other than a string was attempted to be used as a\nmap key type.",5],[4,"DecodeErrorKind","","Enumeration of possible errors which can occur while decoding a structure."],[13,"ApplicationError","","An error flagged by the application, e.g. value out of range",6],[13,"ExpectedField","","A field was expected, but none was found.",6],[13,"ExpectedType","","A field was found, but it had the wrong type.",6],[13,"ExpectedMapKey","","The nth map key was expected, but none was found.",6],[13,"ExpectedMapElement","","The nth map element was expected, but none was found.",6],[13,"NoEnumVariants","","An enum decoding was requested, but no variants were supplied",6],[13,"NilTooLong","","The unit type was being decoded, but a non-zero length string was found",6],[4,"Value","","Representation of a TOML value."],[13,"String","","",7],[13,"Integer","","",7],[13,"Float","","",7],[13,"Boolean","","",7],[13,"Datetime","","",7],[13,"Array","","",7],[13,"Table","","",7],[5,"encode","","Encodes an encodable value into a TOML value."],[5,"encode_str","","Encodes an encodable value into a TOML string."],[5,"decode","","Decodes a TOML value into a decodable type."],[5,"decode_str","","Decodes a string into a toml-encoded value."],[11,"fmt","","",1],[11,"new","","Creates a new parser for a string.",0],[11,"to_linecol","","Converts a byte offset from an error message to a (line, column) pair",0],[11,"parse","","Executes the parser, parsing the string contained within.",0],[11,"description","","",1],[11,"fmt","","",1],[11,"fmt","","",7],[11,"fmt","","",5],[11,"fmt","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"fmt","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"new","","Constructs a new encoder which will emit to the given output stream.",2],[11,"emit_nil","","",2],[11,"emit_usize","","",2],[11,"emit_u8","","",2],[11,"emit_u16","","",2],[11,"emit_u32","","",2],[11,"emit_u64","","",2],[11,"emit_isize","","",2],[11,"emit_i8","","",2],[11,"emit_i16","","",2],[11,"emit_i32","","",2],[11,"emit_i64","","",2],[11,"emit_bool","","",2],[11,"emit_f32","","",2],[11,"emit_f64","","",2],[11,"emit_char","","",2],[11,"emit_str","","",2],[11,"emit_enum","","",2],[11,"emit_enum_variant","","",2],[11,"emit_enum_variant_arg","","",2],[11,"emit_enum_struct_variant","","",2],[11,"emit_enum_struct_variant_field","","",2],[11,"emit_struct","","",2],[11,"emit_struct_field","","",2],[11,"emit_tuple","","",2],[11,"emit_tuple_arg","","",2],[11,"emit_tuple_struct","","",2],[11,"emit_tuple_struct_arg","","",2],[11,"emit_option","","",2],[11,"emit_option_none","","",2],[11,"emit_option_some","","",2],[11,"emit_seq","","",2],[11,"emit_seq_elt","","",2],[11,"emit_map","","",2],[11,"emit_map_elt_key","","",2],[11,"emit_map_elt_val","","",2],[11,"new","","Creates a new decoder, consuming the TOML value to decode.",3],[11,"read_nil","","",3],[11,"read_usize","","",3],[11,"read_u64","","",3],[11,"read_u32","","",3],[11,"read_u16","","",3],[11,"read_u8","","",3],[11,"read_isize","","",3],[11,"read_i64","","",3],[11,"read_i32","","",3],[11,"read_i16","","",3],[11,"read_i8","","",3],[11,"read_bool","","",3],[11,"read_f64","","",3],[11,"read_f32","","",3],[11,"read_char","","",3],[11,"read_str","","",3],[11,"read_enum","","",3],[11,"read_enum_variant","","",3],[11,"read_enum_variant_arg","","",3],[11,"read_enum_struct_variant","","",3],[11,"read_enum_struct_variant_field","","",3],[11,"read_struct","","",3],[11,"read_struct_field","","",3],[11,"read_tuple","","",3],[11,"read_tuple_arg","","",3],[11,"read_tuple_struct","","",3],[11,"read_tuple_struct_arg","","",3],[11,"read_option","","",3],[11,"read_seq","","",3],[11,"read_seq_elt","","",3],[11,"read_map","","",3],[11,"read_map_elt_key","","",3],[11,"read_map_elt_val","","",3],[11,"error","","",3],[11,"fmt","","",4],[11,"description","","",4],[11,"fmt","","",5],[11,"description","","",5],[6,"Array","","Type representing a TOML array, payload of the Value::Array variant"],[6,"Table","","Type representing a TOML table, payload of the Value::Table variant"],[11,"fmt","","",7],[11,"clone","","",7],[11,"eq","","",7],[11,"ne","","",7],[11,"same_type","","Tests whether this and another value have the same type.",7],[11,"type_str","","Returns a human-readable representation of the type of this value.",7],[11,"as_str","","Extracts the string of this value if it is a string.",7],[11,"as_integer","","Extracts the integer value if it is an integer.",7],[11,"as_float","","Extracts the float value if it is a float.",7],[11,"as_bool","","Extracts the boolean value if it is a boolean.",7],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",7],[11,"as_slice","","Extracts the array value if it is an array.",7],[11,"as_table","","Extracts the table value if it is a table.",7],[11,"lookup","","Lookups for value at specified path.",7],[6,"Err","",""],[11,"from_str","","",7]],"paths":[[3,"Parser"],[3,"ParserError"],[3,"Encoder"],[3,"Decoder"],[3,"DecodeError"],[4,"Error"],[4,"DecodeErrorKind"],[4,"Value"]]};
initSearch(searchIndex);
